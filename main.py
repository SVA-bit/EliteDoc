import requests
import sqlite3
import asyncio
import logging
import sys
import os
import locale
import pymorphy3

from docxtpl import DocxTemplate
from datetime import datetime

from typing import Any, Dict

from TOKEN import API_TOKEN, API_KEY

from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputFile,
    FSInputFile,
)

morph = pymorphy3.MorphAnalyzer()
router = Router()

from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import Message, FSInputFile, InputMediaPhoto, InputMediaVideo

#–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π

class Form(StatesGroup):    #–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞
    ogrn = State()          #1. –ü–æ–ª—É—á–µ–Ω–∏–µ –û–ì–†–ù –Æ—Ä.(13) –ò–ü(15) API - –∑–∞–ø—Ä–æ—Å          // –í–Ω–æ—Å–∏–º –≤ –ë–î
    address = State()       #2. –ü—Ä–æ–ø–∏—Å–∫–∏ –ò–ü –Ω–µ—Ç –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ –∑–∞–ø—Ä–æ—Å           // –í–Ω–æ—Å–∏–º –≤ –ë–î
    bik = State()           #3. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã API - –∑–∞–ø—Ä–æ—Å –ø–æ –ë–ò–ö—É           // –í–Ω–æ—Å–∏–º –≤ –ë–î
    rs = State()            #4. –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç                             // –í–Ω–æ—Å–∏–º –≤ –ë–î
    mail = State()          #5. –ü–æ–ª—É—á–∞–µ–º E-mail                                     // –í–Ω–æ—Å–∏–º –≤ –ë–î
    tel = State()           #6. –ü–æ–ª—É—á–∞–µ–º –¢–µ–ª–µ—Ñ–æ–Ω, –î–æ—Å—Ç–∞—ë–º –≤—Å–µ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                            ## –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ /doc –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—é 


class User(StatesGroup):    # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª—É–∂–µ–±–∫–∏ /copy
    user_name = State()     #1. –§.–ò.–û. 
    user_post = State()     #2. –î–æ–ª–∂–Ω–æ—Å—Ç—å


#–•–µ–Ω–¥–ª–µ—Ä /start 
#1. –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ë–î —Å–æ–∑–¥–∞—ë—Ç –µ—ë 
#2. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID

@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Buyers (
    id INTEGER PRIMARY KEY,
    user_id TEXT,
    user_name TEXT,
    user_post TEXT,
    user_tel TEXT,
    user_sity TEXT, 
    ogrn TEXT,
    inn TEXT,
    kpp TEXT,
    datareg TEXT,
    fullname TEXT,
    name TEXT,
    dir TEXT,
    sex TEXT,
    address TEXT,
    bik TEXT,
    bank TEXT,
    ks TEXT,
    rs TEXT,
    mail TEXT,
    tel TEXT,
    addressg TEXT
    )
    ''')
    connection.commit()
    connection.close()
    try:
        sqlite_connection = sqlite3.connect('database.db')
        cursor = sqlite_connection.cursor()
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")

        sqlite_insert_with_param = """INSERT INTO Buyers
                              (id, user_id)
                              VALUES (?,?);"""
        data_tuple = (user_id, user_id)
        cursor.execute(sqlite_insert_with_param, data_tuple)
        sqlite_connection.commit()
        print("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚Äã‚Äã–≤ —Ç–∞–±–ª–∏—Ü—É sqlitedb_developers ")
        cursor.close()

    except sqlite3.Error as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
    finally:
        if sqlite_connection:
            sqlite_connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")
    await state.set_state(Form.ogrn) 
    await message.answer("üóÑ –í–≤–µ–¥–∏—Ç–µ –û–ì–†–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")

#–•–µ–Ω–¥–ª–µ—Ä /limit
#–î–æ—Å—Ç–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
#–ü–æ len(ogrn) –≤—ã–±–∏—Ä–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
#–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–∑ –Ω–∏—Ö –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É 

@router.message(Command("limit"))
@router.message(F.text.casefold() == "limit")
async def limit_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    await message.answer(f"üíµ")
    await message.answer("üìé–§–æ—Ä–º–∏—Ä—É—é –õ–∏–º–∏—Çüìé")

    sqlite_connection = sqlite3.connect('database.db')
    cursor = sqlite_connection.cursor()
    sql_select_query = """SELECT * from Buyers WHERE user_id = ?"""
    cursor.execute(sql_select_query, (user_id,))
    records = cursor.fetchall()
    for row in records:
        ogrn = row[6]
        inn = row[7]
        kpp = row[8]
        datareg = row[9]
        fullname = row[10]
        name = row[11]
        dir = row[12]
        sex = row[13]
        address = row[14]
        bik = row[15]
        bank = row[16]
        ks = row[17]
        rs = row[18]
        mail = row[19]
        tel = row[20]
    cursor.close()
    print (records)

    if len(ogrn) == 13:
        words = dir.split()
        new_words = []
        for word in words:
           p = morph.parse(word)[0]
           new_word = p.inflect({'gent'}).word
           new_words.append(new_word)
           word = (" ".join(new_words))
        word = [int(x) if x.isdigit() else x for x in word.split()]
        word = [item.capitalize() for item in word]
        dir = (" ".join(word))
        sexs = sex.split()
        new_sexs = []
        for sex in sexs:
            p = morph.parse(sex)[0]
            new_sex = p.inflect({'gent'}).word
            new_sexs.append(new_sex)
            sex = (" ".join(new_sexs))
        sex = [int(x) if x.isdigit() else x for x in sex.split()]
        sex = [item.capitalize() for item in sex]
        sex = (" ".join(sex))

        doc = DocxTemplate("doc/Company_limit.docx")
        context = {'fullname': fullname, 'datareg': datareg, 'name': name, 'ogrn': ogrn, 'sex': sex, 'inn': inn, 'dir': dir, 
             'address': address, 'kpp': kpp, 'bik': bik, 'bank': bank, 'ks': ks, 'rs': rs, 'mail': mail, 'tel': tel}
        doc.render(context)
        name = str(name).replace('"', '')
        doc.save(f'–õ–∏–º–∏—Ç {name}.docx')
        print(name)
        try:
            new_buyer = FSInputFile(f'–õ–∏–º–∏—Ç {name}.docx')
            result = await message.answer_document(
                new_buyer,
            )
        finally:
            os.remove(f'–õ–∏–º–∏—Ç {name}.docx')
        await state.set_state(Form.ogrn)
    elif len(ogrn) == 15:
        doc = DocxTemplate("doc/Entrepreneur_limit.docx")
        print("–í–∑—è–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
        context = {'fullname': fullname, 'datareg': datareg, 'name': name, 'ogrn': ogrn, 'inn': inn, 'dir': dir, 
             'address': address, 'kpp': kpp, 'bik': bik, 'bank': bank, 'ks': ks, 'rs': rs, 'mail': mail, 'tel': tel}
        doc.render(context)
        name = str(name).replace('"', '')
        doc.save(f'–õ–∏–º–∏—Ç {name}.docx')
        try:
            new_buyer = FSInputFile(f'–õ–∏–º–∏—Ç {name}.docx')
            result = await message.answer_document(
                new_buyer,
            )
        finally:
            os.remove(f'–õ–∏–º–∏—Ç {name}.docx') 

    await state.set_state(Form.ogrn)
    await message.answer("üóÑ –í–≤–µ–¥–∏—Ç–µ –û–ì–†–ù")

#–•–µ–Ω–¥–ª–µ—Ä /alert
#–î–æ—Å—Ç–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
#–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–∑ –Ω–∏—Ö –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –ø–µ—á–∞—Ç–∏ –ø–æ —à–∞–±–ª–æ–Ω—É 

@router.message(Command("alert"))
@router.message(F.text.casefold() == "alert")
async def alert_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –ø–µ—á–∞—Ç–∏")
    await message.answer("üìé–í–∞—à —Ñ–∞–π–ª–∏–∫üìé")

    sqlite_connection = sqlite3.connect('database.db')
    cursor = sqlite_connection.cursor()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
    sql_select_query = """SELECT * from Buyers WHERE user_id = ?"""
    cursor.execute(sql_select_query, (user_id,))
    records = cursor.fetchall()
    for row in records:
        ogrn = row[6]
        inn = row[7]
        name = row[11]
        address = row[14]
    cursor.close()
    print (records)
    if len(ogrn) == 13:
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ò–ü")
    elif len(ogrn) == 15:
        doc = DocxTemplate("doc/Alert.docx")
        print("–í–∑—è–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
        context = {'name': name, 'ogrn': ogrn, 'inn': inn, 'address': address}
        doc.render(context)
        name = str(name).replace('"', '')
        doc.save(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {name}.docx')
        try:
            new_buyer = FSInputFile(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {name}.docx')
            result = await message.answer_document(
                new_buyer,
            )
        finally:
            os.remove(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {name}.docx')

    await state.set_state(Form.ogrn)
    await message.answer("üóÑ –í–≤–µ–¥–∏—Ç–µ –û–ì–†–ù")

#–•–µ–Ω–¥–ª–µ—Ä /copy
#–î–æ—Å—Ç–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
#–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –§.–ò.–û. –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, 
#–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–∑ –Ω–∏—Ö –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É 
# –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ö–µ–Ω–¥–ª–µ—Ä /hello  

@router.message(Command("copy"))
@router.message(F.text.casefold() == "copy")
async def copy_handler(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    await message.answer(f"–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    

    sqlite_connection = sqlite3.connect('database.db')
    cursor = sqlite_connection.cursor()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
    sql_select_query = """SELECT * from Buyers WHERE user_id = ?"""
    cursor.execute(sql_select_query, (user_id,))
    records = cursor.fetchall()
    for row in records:
        user_name = row[2]
        user_post = row[3]
        ogrn = row[6]
        name = row[11]
    cursor.close()
    print (records)
    if user_name == None:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è /hello")
    else:
        await message.answer("üìé–í–∞—à —Ñ–∞–π–ª–∏–∫üìé")
        doc = DocxTemplate("doc/Copy.docx")
        context = {'name': name, 'ogrn': ogrn, 'user_name': user_name, 'user_post': user_post}
        doc.render(context)
        name = str(name).replace('"', '')
        doc.save(f'–ö–æ–ø–∏–∏ {name}.docx')
        try:
            new_buyer = FSInputFile(f'–ö–æ–ø–∏–∏ {name}.docx')
            result = await message.answer_document(
                new_buyer
            )
            await state.set_state(Form.ogrn)
            await message.answer("üóÑ –í–≤–µ–¥–∏—Ç–µ –û–ì–†–ù")   
        finally:
            os.remove(f'–ö–æ–ø–∏–∏ {name}.docx')

#–•–µ–Ω–¥–ª–µ—Ä /hello
#–í–Ω–æ—Å–∏—Ç –§.–ò.–û. –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –ë–î

@router.message(Command("hello"))
@router.message(F.text.casefold() == "hello")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(User.user_name)
    await message.answer("‚úÖ(1/2) –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
@router.message(User.user_name) 
async def process_rs(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if message.text:
        user_name = message.text
        try:
            sqlite_connection = sqlite3.connect('database.db')
            cursor = sqlite_connection.cursor()
            sql_update_query = """Update Buyers set user_name = ? WHERE user_id = ?"""
            data4 = (user_name, user_id)
            cursor.execute(sql_update_query, data4)
            sqlite_connection.commit()
            cursor.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sqlite_connection:
                sqlite_connection.close()

        await state.set_state(User.user_post)
        await message.answer("‚úÖ(2/2) –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å")

@router.message(User.user_post) 
async def process_rs(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if message.text:
        user_post = message.text
        try:
            sqlite_connection = sqlite3.connect('database.db')
            cursor = sqlite_connection.cursor()
            sql_update_query = """Update Buyers set user_post = ? WHERE user_id = ?"""
            data4 = (user_post, user_id)
            cursor.execute(sql_update_query, data4)
            sqlite_connection.commit()
            cursor.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sqlite_connection:
                sqlite_connection.close()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –∑–∞–∫—Ä—ã—Ç–æ")
        await state.clear()
        await message.answer("/copy")

# –û—Å–Ω–æ–≤–Ω–æ–µ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
# –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –û–ì–†–ù
# –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–≤–Ω–∞ 13 –∑–Ω–∞–∫–∞–º, —Ç–æ –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å –ø–æ –±–∞–∑–µ –ï–ì–†–Æ–õ 
# –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–≤–Ω–∞ 15 –∑–Ω–∞–∫–∞–º, —Ç–æ –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å –ø–æ –±–∞–∑–µ –ï–ì–†–ò–ü 
# –ü–æ–ª—É—á–µ–Ω–Ω—ã–π json –æ—Ç–≤–µ—Ç —Ä–∞–∑–±–∏—Ä–∞–µ–º –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

# –ï—Å–ª–∏ –ò–ü –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ address
# –ï—Å–ª–∏ –Æ–õ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ bik


@router.message(Form.ogrn) 
async def process_name(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id

    if len(message.text) == 13:

        url = ("https://api.checko.ru/v2/company")
        params = {"key": API_KEY, "ogrn": message.text, "source": "true"}
        
        r = requests.get(url, params)
        data = r.json()
        print(data)
        if len(data["data"]) > 5:

            ogrn = data["data"]["–û–ì–†–ù"]
            inn = data["data"]["–ò–ù–ù"]
            kpp = data["data"]["–ö–ü–ü"]
            fullname = data["data"]["–ù–∞–∏–º–ü–æ–ª–Ω"]
            fullname = str(fullname).replace('|', '') 
            name = data["data"]["–ù–∞–∏–º–°–æ–∫—Ä"]
            name = str(name).replace('|', '')
            address = data["data"]["–Æ—Ä–ê–¥—Ä–µ—Å"]["–ê–¥—Ä–µ—Å–†–§"]
            address = str(address).replace('|', '')
            dir = data["data"]["–†—É–∫–æ–≤–æ–¥"][0]["–§–ò–û"]
            sex = data["data"]["–†—É–∫–æ–≤–æ–¥"][0]["–ù–∞–∏–º–î–æ–ª–∂–Ω"]
            datareg = ('NULL')

            try:
                sqlite_connection = sqlite3.connect('database.db')
                cursor = sqlite_connection.cursor()
                sql_update_query = """Update Buyers set ogrn = ?, inn = ?, kpp = ?, fullname = ?, name = ?, address = ?, dir = ?, datareg = ?, sex = ? WHERE user_id = ?"""
                data4 = (ogrn, inn, kpp, fullname, name, address, dir, datareg, sex, user_id)
                cursor.execute(sql_update_query, data4)
                sqlite_connection.commit()
                cursor.close()
            except sqlite3.Error as error:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
            finally:
                if sqlite_connection:
                    sqlite_connection.close()
                

            await message.answer(f" ‚úÖ(1/5) = {name}")
            await state.set_state(Form.bik)
            await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ –ë–ò–ö \n \n<i>(–í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ '-')</i>")
        else:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")

    elif len(message.text) == 15:
        url = ("https://api.checko.ru/v2/entrepreneur")
        params = {"key": API_KEY, "ogrn": message.text, "source": "true"}
        r = requests.get(url, params)
        data = r.json()
        print(data)

        if len(data["data"]) > 5:

            ogrn = data["data"]["–û–ì–†–ù–ò–ü"]
            inn = data["data"]["–ò–ù–ù"]
            kpp = data["data"]["–û–ö–ü–û"]
            datareg = data["data"]["–î–∞—Ç–∞–û–ì–†–ù–ò–ü"]
            locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
            date_object = datetime.strptime(datareg, '%Y-%m-%d')
            datareg = date_object.strftime('%d.%m.%Y')
            fullname = data["data"]["–¢–∏–ø"]
            fullname = str(fullname).replace('|', '')
            name = data["data"]["–§–ò–û"]
            name = str(name).replace('|', '')
            dir = ('NULL')
            sex = ('NULL')
            try:
                sqlite_connection = sqlite3.connect('database.db')
                cursor = sqlite_connection.cursor()
                sql_update_query = """Update Buyers set ogrn = ?, inn = ?, kpp = ?, datareg = ?, fullname = ?, name = ?, dir = ?, sex = ? WHERE user_id = ?"""
                data4 = (ogrn, inn, kpp, datareg, fullname, name, dir, sex, user_id)
                cursor.execute(sql_update_query, data4)
                sqlite_connection.commit()
                cursor.close()
            except sqlite3.Error as error:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
            finally:
                if sqlite_connection:
                    sqlite_connection.close()


            await state.set_state(Form.address)
            await message.answer(f" ‚úÖ(1/6) = {name}")
            await message.answer("üè° –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø–∏—Å–∫—É")
        else:
            await message.answer("–û–ì–†–ù–ò–ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await message.answer("‚õîÔ∏è –û–ì–†–ù —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ address
# –í–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–º –∞–¥—Ä–µ—Å–µ –ò–ü

@router.message(Form.address) 
async def process_rs(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if message.text:
        address = message.text
        try:
            sqlite_connection = sqlite3.connect('database.db')
            cursor = sqlite_connection.cursor()
            sql_update_query = """Update Buyers set address = ? WHERE user_id = ?"""
            data4 = (address, user_id)
            cursor.execute(sql_update_query, data4)
            sqlite_connection.commit()
            cursor.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sqlite_connection:
                sqlite_connection.close()

        await state.set_state(Form.bik)
        await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ –ë–ò–ö \n <i>–í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ '-'</i>")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ bik
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (9)
# –î–µ–ª–∞–µ–º API –∑–∞–ø–æ—Ä–æ—Å 
# –ü–æ–ª—É—á–µ–Ω–Ω—ã–π json –æ—Ç–≤–µ—Ç —Ä–∞–∑–±–∏–≤–∞–º –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î

@router.message(Form.bik) 
async def process_bik(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id

    if len(message.text) == 9:
#        ogr = ("https://api.checko.ru/v2/bank") #–≠–∫–æ–Ω–æ–º–∏–º –∑–∞–ø—Ä–æ—Å—ã, –ª–∏–º–∏—Ç 100 –∑–∞–ø/—Å—É—Ç.
#        params = {"key": API_KEY, "bic": message.text} 
        ogr = ("https://bik-info.ru/api.html?type=json&bik=")
        params = {"type": "json", "bik": message.text}
        r = requests.get(ogr, params)
        data = r.json()
        print(data)
        if len(data["bik"]) > 5:
#            bik = data["data"]["–ë–ò–ö"]
#            bank = data["data"]["–ù–∞–∏–º"]
#            ks = data["data"]["–ö–æ—Ä–°—á–µ—Ç"]["–ù–æ–º–µ—Ä"]
            bik = data["bik"]
            ks = data["ks"]
            bank = data["namemini"]
            city = data["city"]
            bank = (f"{bank} –≥. {city}")
            print(bank)
            try:
                sqlite_connection = sqlite3.connect('database.db')
                cursor = sqlite_connection.cursor()
                sql_update_query = """Update Buyers set bik = ?, bank = ?, ks = ? WHERE user_id = ?"""
                data4 = (bik, bank, ks, user_id)
                cursor.execute(sql_update_query, data4)
                sqlite_connection.commit()
                cursor.close()
            except sqlite3.Error as error:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
            finally:
                if sqlite_connection:
                    sqlite_connection.close()

            await message.answer(f" ‚úÖ(2/6) {bank}")
            await state.set_state(Form.rs)
            await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç")
        else:
            await message.answer("–ë–ò–ö —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ")

    elif message.text == "-":
        bik = bank = ks = rs = "-"
        try:
            sqlite_connection = sqlite3.connect('database.db')
            cursor = sqlite_connection.cursor()
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
            sql_update_query = """Update Buyers set bik = ?, bank = ?, ks = ?, rs = ? WHERE user_id = ?"""
            data4 = (bik, bank, ks, rs, user_id)
            cursor.execute(sql_update_query, data4)
            sqlite_connection.commit()
            cursor.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sqlite_connection:
                sqlite_connection.close()
        
        await message.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ E-mail")
        await state.set_state(Form.mail)
    else:
        le = len(message.text)
        print(le)
        await message.answer(f"‚õîÔ∏è –ë–ò–ö —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ {le}/9")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ rs
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (20)
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª (4)
# –í–Ω–æ—Å–∏–º –≤ –ë–î

@router.message(Form.rs) 
async def process_rs(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if len(message.text) == 20:
        rs = message.text
        if rs[0] == "4":   
            try:
                sqlite_connection = sqlite3.connect('database.db')
                cursor = sqlite_connection.cursor()
                sql_update_query = """Update Buyers set rs = ? WHERE user_id = ?"""
                data4 = (rs, user_id)
                cursor.execute(sql_update_query, data4)
                sqlite_connection.commit()
                cursor.close()
            except sqlite3.Error as error:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
            finally:
                if sqlite_connection:
                    sqlite_connection.close()

            await message.answer(f"‚úÖ(3/5)") #= {rs}
            await state.set_state(Form.mail)
            await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ E-mail")
        else:
            await message.answer(f"–£–∫–∞–∑–∞–Ω –∫/—Å, —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 4... ")
    else:
        le = len(message.text)
        await message.answer(f"‚õîÔ∏è –†/–° —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ - {le}/20")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ mail
# –í–Ω–æ—Å–∏–º –≤ –ë–î

@router.message(Form.mail) 
async def process_rs(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if message.text:
        mail = message.text
        try:
            sqlite_connection = sqlite3.connect('database.db')
            cursor = sqlite_connection.cursor()
            sql_update_query = """Update Buyers set mail = ? WHERE user_id = ?"""
            data4 = (mail, user_id)
            cursor.execute(sql_update_query, data4)
            sqlite_connection.commit()
            cursor.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sqlite_connection:
                sqlite_connection.close()

        await message.answer(f" ‚úÖ(4/5)") #= {mail}
        await state.set_state(Form.tel)
        await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


# –°–æ—Å—Ç–æ—è–Ω–∏–µ tel
# –í–Ω–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ë–î

# –ü–æ Telegram ID –î–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î –≤—Å–µ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –†–∞–∑–±–∏—Ä–∞–µ–º –∏—Ö –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ 
# –ü–æ len(ogrn) –≤—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞
# –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω 
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

@router.message(Form.tel) 
async def process_rs(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if message.text:
        tel = message.text
        try:
            sqlite_connection = sqlite3.connect('database.db')
            cursor = sqlite_connection.cursor()
            sql_update_query = """Update Buyers set tel = ? WHERE user_id = ?"""
            data4 = (tel, user_id)
            cursor.execute(sql_update_query, data4)
            sqlite_connection.commit()
            cursor.close()
        except sqlite3.Error as error:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å SQLite", error)
        finally:
            if sqlite_connection:
                sqlite_connection.close()

        await message.answer(f" ‚úÖ(5/5)") #= {tel}
        await message.answer("üìé–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞üìé")

        sqlite_connection = sqlite3.connect('database.db')
        cursor = sqlite_connection.cursor()
        sql_select_query = """SELECT * from Buyers WHERE user_id = ?"""
        cursor.execute(sql_select_query, (user_id,))
        records = cursor.fetchall()
        for row in records:
            ogrn = row[6]
            inn = row[7]
            kpp = row[8]
            datareg = row[9]
            fullname = row[10]
            name = row[11]
            dir = row[12]
            sex = row[13]
            address = row[14]
            bik = row[15]
            bank = row[16]
            ks = row[17]
            rs = row[18]
            mail = row[19]
            tel = row[20]
        cursor.close()
        print (records)


        if len(ogrn) == 13:
            words = dir.split()
            new_words = []
            for word in words:
               p = morph.parse(word)[0]
               new_word = p.inflect({'gent'}).word
               new_words.append(new_word)
               word = (" ".join(new_words))
            word = [int(x) if x.isdigit() else x for x in word.split()]
            word = [item.capitalize() for item in word]
            dir = (" ".join(word))
            sexs = sex.split()
            new_sexs = []
            for sex in sexs:
                p = morph.parse(sex)[0]
                new_sex = p.inflect({'gent'}).word
                new_sexs.append(new_sex)
                sex = (" ".join(new_sexs))
            sex = [int(x) if x.isdigit() else x for x in sex.split()]
            sex = [item.capitalize() for item in sex]
            sex = (" ".join(sex))


            doc = DocxTemplate("doc/Company.docx")
            context = {'fullname': fullname, 'datareg': datareg, 'name': name, 'ogrn': ogrn, 'sex': sex, 'inn': inn, 'dir': dir, 
                 'address': address, 'kpp': kpp, 'bik': bik, 'bank': bank, 'ks': ks, 'rs': rs, 'mail': mail, 'tel': tel}
            doc.render(context)
            name = str(name).replace('"', '')
            doc.save(f'{name}.docx')
            print(name)
            try:
                new_buyer = FSInputFile(f'{name}.docx')
                result = await message.answer_document(
                    new_buyer,
                    caption="–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"
                )
                await message.answer("–ü—Ä–æ–≤–µ—Ä—Ç–µ –§–ò–û –≤ —à–∞–ø–∫–µ, —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å üôÑ")
            finally:
                os.remove(f'{name}.docx')  # –£–¥–∞–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            await state.set_state(Form.ogrn)
            await message.answer("/limit - –î–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Å—Ä–æ—á–∫—É \n/copy - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Å–∫–∞–Ω–∞–º")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –û–ì–†–ù")


        elif len(ogrn) == 15:
            doc = DocxTemplate("doc/Entrepreneur.docx")
            print("–í–∑—è–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
            context = {'fullname': fullname, 'datareg': datareg, 'name': name, 'ogrn': ogrn, 'inn': inn, 'dir': dir, 
                 'address': address, 'kpp': kpp, 'bik': bik, 'bank': bank, 'ks': ks, 'rs': rs, 'mail': mail, 'tel': tel}
            doc.render(context)
            name = str(name).replace('"', '')
            doc.save(f'{name}.docx')

            try:
                new_buyer = FSInputFile(f'{name}.docx')
                result = await message.answer_document(
                    new_buyer,
                    caption="–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"
                )
            finally:
                os.remove(f'{name}.docx')
            await state.set_state(Form.ogrn)
            await message.answer('/limit - –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Å—Ä–æ—á–∫—É \n/alert - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –ø–µ—á–∞—Ç–∏ \n/copy - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Å–∫–∞–Ω–∞–º')
            await message.answer("üóÑ –í–≤–µ–¥–∏—Ç–µ –û–ì–†–ù")


####################################################################################

async def main():
    bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
